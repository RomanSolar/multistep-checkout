/**
 * @template S
 * @typedef {[S, React.Dispatch<React.SetStateAction<S>>]} State
 */

/**
 * @param {Object} props
 * @param {string=} props.type
 * @param {string} props.label
 * @param {string=} props.id
 * @param {string=} props.min
 * @param {string=} props.max
 * @param {State<string>} props.state
 */
const TextInput = ({
  type,
  label,
  id,
  min,
  max,
  state: [get, set]
}) => {
  id = id || name.toLowerCase();
  const element = /*#__PURE__*/React.createElement("input", {
    type: type || 'text',
    id: id,
    name: id,
    autoComplete: id,
    value: get,
    onChange: event => set(event.target.value),
    min: min,
    max: max,
    required: true
  });
  return label ? /*#__PURE__*/React.createElement("tr", null, /*#__PURE__*/React.createElement("td", null, /*#__PURE__*/React.createElement("label", {
    for: id
  }, label)), /*#__PURE__*/React.createElement("td", null, element)) : element;
};
/**
 * @param {Object} props
 * @param {() => any} props.onSubmit
 * @param {State<number>} props.buttonLabel
 * @param {React.ReactChildren} props.children
 */


const FormPage = props => /*#__PURE__*/React.createElement("form", {
  onSubmit: event => {
    event.preventDefault();
    props.onSubmit();
  }
}, /*#__PURE__*/React.createElement("table", null, /*#__PURE__*/React.createElement("tbody", null, props.children, /*#__PURE__*/React.createElement("tr", null, /*#__PURE__*/React.createElement("td", null, /*#__PURE__*/React.createElement("input", {
  type: "submit",
  value: props.buttonLabel
}))))));
/**
 * @param {Object} props
 * @param {(Object) => any} props.onSubmit
 */


const F1 = props => {
  const name = React.useState('');
  const email = React.useState('');
  const password = React.useState('');

  const submit = () => props.onSubmit({
    name,
    email,
    password
  });

  return /*#__PURE__*/React.createElement(FormPage, {
    buttonLabel: "Next",
    onSubmit: submit
  }, /*#__PURE__*/React.createElement(TextInput, {
    label: "Name",
    state: name
  }), /*#__PURE__*/React.createElement(TextInput, {
    label: "Email",
    type: "email",
    state: email
  }), /*#__PURE__*/React.createElement(TextInput, {
    type: "password",
    label: "Password",
    id: "new-password",
    state: password
  }));
};
/**
 * @param {Object} props
 * @param {number} props.id
 * @param {(Object) => any} props.onSubmit
 */


const F2 = props => {
  const line1 = React.useState('');
  const line2 = React.useState('');
  const city = React.useState('');
  const state = React.useState('');
  const zipcode = React.useState('');
  const phone = React.useState('');

  const submit = () => props.onSubmit({
    id: [props.id],
    line1,
    line2,
    city,
    state,
    zipcode,
    phone
  });

  return /*#__PURE__*/React.createElement(FormPage, {
    buttonLabel: "Next",
    onSubmit: submit
  }, /*#__PURE__*/React.createElement(TextInput, {
    label: "Address Line 1",
    id: "address-line1",
    state: line1
  }), /*#__PURE__*/React.createElement(TextInput, {
    label: "Address Line 2",
    id: "address-line2",
    state: line2
  }), /*#__PURE__*/React.createElement(TextInput, {
    label: "City",
    id: "address-level2",
    state: city
  }), /*#__PURE__*/React.createElement(TextInput, {
    label: "State",
    id: "address-level1",
    state: state
  }), /*#__PURE__*/React.createElement(TextInput, {
    label: "ZIP Code",
    id: "postal-code",
    state: zipcode
  }), /*#__PURE__*/React.createElement(TextInput, {
    label: "Phone",
    type: "tel",
    state: phone
  }));
};

const currentYear = new Date().getFullYear().toString();
/**
 * @param {Object} props
 * @param {number} props.id
 * @param {(Object) => any} props.onSubmit
 */

const F3 = props => {
  const ccNumber = React.useState('');
  const ccMonth = React.useState('1');
  const ccYear = React.useState(currentYear);
  const ccCVV = React.useState('');
  const ccZipcode = React.useState('');

  const submit = () => props.onSubmit({
    id: [props.id],
    ccNumber,
    ccExpiry: [new Date(ccYear[0], ccMonth[0])],
    ccCVV,
    ccZipcode
  });

  return /*#__PURE__*/React.createElement(FormPage, {
    buttonLabel: "Checkout",
    onSubmit: submit
  }, /*#__PURE__*/React.createElement(TextInput, {
    label: "Credit Card",
    type: "number",
    id: "cc-number",
    max: "9999999999999999",
    state: ccNumber
  }), /*#__PURE__*/React.createElement("tr", null, /*#__PURE__*/React.createElement("td", null, /*#__PURE__*/React.createElement("label", null, "Expiration Date")), /*#__PURE__*/React.createElement("td", null, /*#__PURE__*/React.createElement(TextInput, {
    type: "number",
    id: "cc-exp-month",
    min: "1",
    max: "12",
    state: ccMonth
  }), /*#__PURE__*/React.createElement(TextInput, {
    type: "number",
    id: "cc-exp-year",
    min: currentYear,
    state: ccYear
  }))), /*#__PURE__*/React.createElement(TextInput, {
    label: "CVV",
    type: "number",
    id: "cc-csc",
    max: "999",
    state: ccCVV
  }), /*#__PURE__*/React.createElement(TextInput, {
    label: "Billing Address ZIP code",
    type: "number",
    id: "postal-code",
    max: "99999",
    state: ccZipcode
  }));
};

const App = () => {
  const [page, setPage] = React.useState(0);
  const [id, setId] = React.useState(null);

  const update = form => {
    console.log(form);

    for (const key in form) {
      form[key] = form[key][0];
    }

    const req = new XMLHttpRequest();
    req.open('POST', '/', true);

    req.onload = event => {
      setId(Number(event.target.response));
      setPage(page => (page + 1) % 3);
    };

    req.setRequestHeader('Content-Type', 'application/json;charset=UTF-8');
    req.send(JSON.stringify(form));
  };

  if (page === 0) {
    return /*#__PURE__*/React.createElement(F1, {
      onSubmit: update
    });
  } else if (page === 1) {
    return /*#__PURE__*/React.createElement(F2, {
      onSubmit: update,
      id: id
    });
  } else {
    return /*#__PURE__*/React.createElement(F3, {
      onSubmit: update,
      id: id
    });
  }
};

ReactDOM.render( /*#__PURE__*/React.createElement(App, null), document.getElementById('app'));

//# sourceMappingURL=data:application/json;charset=utf-8;base64,